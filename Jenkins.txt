gcloud config set compute/zone 
gsutil cp gs://spls/gsp051/continuous-deployment-on-kubernetes.zip .
unzip continuous-deployment-on-kubernetes.zip
cd continuous-deployment-on-kubernetes

2)gcloud container clusters create jenkins-cd \
--num-nodes 2 \
--machine-type e2-standard-2 \
--scopes "https://www.googleapis.com/auth/source.read_write,cloud-platform"
gcloud container clusters list
gcloud container clusters get-credentials jenkins-cd
kubectl cluster-info

3)helm repo add jenkins https://charts.jenkins.io
helm repo update

4)helm install cd jenkins/jenkins -f jenkins/values.yaml --wait
kubectl get pods
kubectl create clusterrolebinding jenkins-deploy --clusterrole=cluster-admin --serviceaccount=default:cd-jenkins
export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/component=jenkins-master" -l "app.kubernetes.io/instance=cd" -o jsonpath="{.items[0].metadata.name}")
kubectl port-forward $POD_NAME 8080:8080 >> /dev/null &
kubectl get svc

5)printf $(kubectl get secret cd-jenkins -o jsonpath="{.data.jenkins-admin-password}" | base64 --decode);echo

7)cd sample-app
kubectl create ns production
kubectl apply -f k8s/production -n production
kubectl apply -f k8s/services -n production
kubectl scale deployment gceme-frontend-production -n production --replicas 4
kubectl get pods -n production -l app=gceme -l role=frontend
kubectl get pods -n production -l app=gceme -l role=backend
kubectl get service gceme-frontend -n production
export FRONTEND_SERVICE_IP=$(kubectl get -o jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
curl http://$FRONTEND_SERVICE_IP/version

8)gcloud source repos create default
git init
git config credential.helper gcloud.sh
git remote add origin https://source.developers.google.com/p/$DEVSHELL_PROJECT_ID/r/default
git config --global user.email "[EMAIL_ADDRESS]"
git config --global user.name "[USERNAME]"
git add .
git commit -m "Initial commit"
git push origin master
\*In the Jenkins user interface, click Manage Jenkins in the left navigation then click Security > Credentials.

Click System.
Click Global credentials (unrestricted).

Click Add Credentials in the top right corner.

Select Google Service Account from metadata from the Kind drop-down and click Create.

Configure Jenkins Cloud for Kubernetes
In the Jenkins user interface, select Manage Jenkins > Nodes.
Click Clouds in the left navigation pane.
Click New cloud.
Type any name under Cloud name and then select Kubernetes for Type.
Click Create.
Click Kubernetes Cloud Details.
In the Jenkins URL field, enter the following value: http://cd-jenkins:8080
In the Jenkins tunnel field, enter the following value: cd-jenkins-agent:50000
Click Save.
Creating the Jenkins job
Navigate to your Jenkins user interface and follow these steps to configure a Pipeline job.

Click Dashboard > New Item in the left panel.

Name the project sample-app, then choose the Multibranch Pipeline option and click OK.

On the next page, in the Branch Sources section, select Git from Add Source dropdown.

Paste the HTTPS clone URL of your sample-app repo in Cloud Source Repositories into the Project Repository field. Replace [PROJECT_ID] with your Project ID:

https://source.developers.google.com/p/[PROJECT_ID]/r/default

From the Credentials drop-down, select the name of the credentials you created when adding your service account in the previous steps.

Under Scan Multibranch Pipeline Triggers section, check the Periodically if not otherwise run box and set the Interval value to 1 minute

Click Save leaving all other options with their defaults

9)git checkout -b new-feature
vi Jenkinsfile
i
Add your PROJECT_ID to the REPLACE_WITH_YOUR_PROJECT_ID value. (Your PROJECT_ID is your Project ID found in the CONNECTION DETAILS section of the lab. You can also run gcloud config get-value project to find it.

Change the value of CLUSTER_ZONE to <filled in at lab start>. You can get this value by running gcloud config get compute/zone.
:wq

vi html.go
i
Change the two instances of <div class="card blue"> with following:
<div class="card orange">
Save the html.go file: press Esc then:
:wq
vi main.go
i
Update it to the following:
const version string = "2.0.0"
:wq

10)git add Jenkinsfile html.go main.go
git commit -m "Version 2.0.0"
git push origin new-feature
kubectl proxy &
ctrl+c
curl \
http://localhost:8001/api/v1/namespaces/new-feature/services/gceme-frontend:80/proxy/version

11)git checkout -b canary
git push origin canary
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done

12)git checkout master
git merge canary
git push origin master
export FRONTEND_SERVICE_IP=$(kubectl get -o \
jsonpath="{.status.loadBalancer.ingress[0].ip}" --namespace=production services gceme-frontend)
while true; do curl http://$FRONTEND_SERVICE_IP/version; sleep 1; done
kubectl get service gceme-frontend -n production

13)